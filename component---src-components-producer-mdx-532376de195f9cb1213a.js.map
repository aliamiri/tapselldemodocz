{"version":3,"sources":["webpack:///../src/components/Producer.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","href","isMDXComponent"],"mappings":"yPAQaA,G,UAAe,S,6MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,YADR,YAGA,qRACA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,WAAnB,oBAAmF,iBAAGC,KAAK,WAAR,WAAnF,4BACgB,0BAAYD,WAAW,KAAvB,mBADhB,+FAC2K,0BAAYA,WAAW,KAAvB,qBAD3K,wCAGF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,mBAAnB,oBAA2F,iBAAGC,KAAK,kBAAR,kBAA3F,kBAA6J,0BAAYD,WAAW,KAAvB,WAA7J,uFAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,kBAAnB,oBAA0F,iBAAGC,KAAK,iBAAR,iBAA1F,kBAA0J,0BAAYD,WAAW,KAAvB,WAA1J,0F,2MAORJ,EAAWM,gBAAiB","file":"component---src-components-producer-mdx-532376de195f9cb1213a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/iraj/Projects/Tapsell/docz/my-docz-app/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"producer\"\n    }}>{`Producer`}</h1>\n    <p>{`This spring boot application is the Kafka producer or, as it named generator. There is no special consideration for this app. This application will generate semi-random data and pass them to Kafka. You could access this application with rest requests. `}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`send ad`}</strong>{` Accessible from `}<a href='/sendAd'>{`/sendAd`}</a>{`:\nWill generate several `}<inlineCode parentName=\"p\">{`ImpressionEvent`}</inlineCode>{`s(a random number between 0 to 1000) and pass them to Kafka. I'll put the generated Id on a `}<inlineCode parentName=\"p\">{`ConcurrentHashMap`}</inlineCode>{` if it has been used so far or not.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Send Good Click`}</strong>{` Accessible from `}<a href='/sendGoodClick'>{`/sendGoodClick`}</a>{`: will use the `}<inlineCode parentName=\"p\">{`HashMap`}</inlineCode>{` and send acceptable click events for each requestId with a random chance of 15% .`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Send Bad Click`}</strong>{` Accessible from `}<a href='/sendBadClick'>{`/sendBadClick`}</a>{`: will use the `}<inlineCode parentName=\"p\">{`HashMap`}</inlineCode>{` and send unacceptable  click events for each requestId with a chance of 10% .`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}